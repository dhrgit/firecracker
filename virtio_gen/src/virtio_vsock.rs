/* automatically generated by rust-bindgen */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const VIRTIO_CONFIG_S_ACKNOWLEDGE: u32 = 1;
pub const VIRTIO_CONFIG_S_DRIVER: u32 = 2;
pub const VIRTIO_CONFIG_S_DRIVER_OK: u32 = 4;
pub const VIRTIO_CONFIG_S_FEATURES_OK: u32 = 8;
pub const VIRTIO_CONFIG_S_FAILED: u32 = 128;
pub const VIRTIO_TRANSPORT_F_START: u32 = 28;
pub const VIRTIO_TRANSPORT_F_END: u32 = 33;
pub const VIRTIO_F_NOTIFY_ON_EMPTY: u32 = 24;
pub const VIRTIO_F_ANY_LAYOUT: u32 = 27;
pub const VIRTIO_F_VERSION_1: u32 = 32;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_vsock_config {
    pub guest_cid: __le64,
}
#[test]
fn bindgen_test_layout_virtio_vsock_config() {
    assert_eq!(
        ::std::mem::size_of::<virtio_vsock_config>(),
        8usize,
        concat!("Size of: ", stringify!(virtio_vsock_config))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_vsock_config>(),
        1usize,
        concat!("Alignment of ", stringify!(virtio_vsock_config))
    );
}
pub const virtio_vsock_event_id_VIRTIO_VSOCK_EVENT_TRANSPORT_RESET: virtio_vsock_event_id = 0;
pub type virtio_vsock_event_id = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_vsock_event {
    pub id: __le32,
}
#[test]
fn bindgen_test_layout_virtio_vsock_event() {
    assert_eq!(
        ::std::mem::size_of::<virtio_vsock_event>(),
        4usize,
        concat!("Size of: ", stringify!(virtio_vsock_event))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_vsock_event>(),
        1usize,
        concat!("Alignment of ", stringify!(virtio_vsock_event))
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct virtio_vsock_hdr {
    pub src_cid: __le64,
    pub dst_cid: __le64,
    pub src_port: __le32,
    pub dst_port: __le32,
    pub len: __le32,
    pub type_: __le16,
    pub op: __le16,
    pub flags: __le32,
    pub buf_alloc: __le32,
    pub fwd_cnt: __le32,
}
#[test]
fn bindgen_test_layout_virtio_vsock_hdr() {
    assert_eq!(
        ::std::mem::size_of::<virtio_vsock_hdr>(),
        44usize,
        concat!("Size of: ", stringify!(virtio_vsock_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<virtio_vsock_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(virtio_vsock_hdr))
    );
}
pub const virtio_vsock_type_VIRTIO_VSOCK_TYPE_STREAM: virtio_vsock_type = 1;
pub type virtio_vsock_type = u32;
pub const virtio_vsock_op_VIRTIO_VSOCK_OP_INVALID: virtio_vsock_op = 0;
pub const virtio_vsock_op_VIRTIO_VSOCK_OP_REQUEST: virtio_vsock_op = 1;
pub const virtio_vsock_op_VIRTIO_VSOCK_OP_RESPONSE: virtio_vsock_op = 2;
pub const virtio_vsock_op_VIRTIO_VSOCK_OP_RST: virtio_vsock_op = 3;
pub const virtio_vsock_op_VIRTIO_VSOCK_OP_SHUTDOWN: virtio_vsock_op = 4;
pub const virtio_vsock_op_VIRTIO_VSOCK_OP_RW: virtio_vsock_op = 5;
pub const virtio_vsock_op_VIRTIO_VSOCK_OP_CREDIT_UPDATE: virtio_vsock_op = 6;
pub const virtio_vsock_op_VIRTIO_VSOCK_OP_CREDIT_REQUEST: virtio_vsock_op = 7;
pub type virtio_vsock_op = u32;
pub const virtio_vsock_shutdown_VIRTIO_VSOCK_SHUTDOWN_RCV: virtio_vsock_shutdown = 1;
pub const virtio_vsock_shutdown_VIRTIO_VSOCK_SHUTDOWN_SEND: virtio_vsock_shutdown = 2;
pub type virtio_vsock_shutdown = u32;
